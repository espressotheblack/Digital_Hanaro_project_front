/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/oXyhDarPNbM
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/
'use client';

import { useEffect, useState } from 'react';
import axios from 'axios';
import Link from "next/link"
import Image from 'next/image';
import ReactPaginate from 'react-paginate';
import { Input } from "@/components/ui/input"
// import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from "@/components/ui/select"
import Select from 'react-select'
import { Button } from "@/components/ui/button"
import { ResponsivePie, Pie } from "@nivo/pie"
import { ResponsiveBar } from "@nivo/bar"
import { ResponsiveLine } from "@nivo/line"
import { ResponsiveRadar } from '@nivo/radar'

import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faChevronLeft } from '@fortawesome/free-solid-svg-icons';
import { faSignal } from '@fortawesome/free-solid-svg-icons';
import { faWifi } from '@fortawesome/free-solid-svg-icons';
import { faBatteryFull, faTimes } from '@fortawesome/free-solid-svg-icons';

import homeIcon from '../../src/assets/homeicon.jpg';
import cardImage1 from '../../src/assets/card_image_1.png';
import cardImage2 from '../../src/assets/card_image_2.png';
import cardImage3 from '../../src/assets/card_image_3.png';
import calenderimage from '../../src/assets/calendar_menu.jpg';
import operationimage from '../../src/assets/operation_menu.png';
import loanimage from '../../src/assets/loan_menu.png';
import infoimage from '../../src/assets/info_menu.png';

// Import global styles
import './globals.css';

function MyComponent() {
  return <FontAwesomeIcon icon={faChevronLeft} />;
}

export default MyComponent;

export function Component() {
  const [selectedRegion, setSelectedRegion] = useState('');
  const [ageGroup, setAgeGroup] = useState('');

  const handleRegionChange = (region) => {
    setSelectedRegion(region);
    sendSelectionToBackend(region, ageGroup);
  };

  const handleAgeChange = (age) => {
    setAgeGroup(age);
    sendSelectionToBackend(selectedRegion, age);
  };

  const sayHi = (temp) => {
    console.log("say Hi")
  }

  const defaultData = [
    { "taste": "교육", "chardonay": 80, "carmenere": 40 },
    { "taste": "교통", "chardonay": 40, "carmenere": 30 },
    { "taste": "납부", "chardonay": 10, "carmenere": 100 },
    { "taste": "사교활동", "chardonay": 100, "carmenere": 100 },
    { "taste": "쇼핑", "chardonay": 93, "carmenere": 89 },
    { "taste": "여유생활", "chardonay": 90, "carmenere": 80 },
    { "taste": "요식", "chardonay": 85, "carmenere": 70 },
    { "taste": "의료", "chardonay": 78, "carmenere": 65 }
  ];

  const defaultPersonaData = {
    persona: [
      {
        text: "기본 텍스트 1",
        hashtag1: "#기본해시태그11",
        hashtag2: "#기본해시태그12",
        hashtag3: "#기본해시태그13",
        hashtag4: "#기본해시태그14",
        hashtag5: "#기본해시태그15"
      },
      {
        text: "기본 텍스트 2",
        hashtag1: "#기본해시태그21",
        hashtag2: "#기본해시태그22",
        hashtag3: "#기본해시태그23",
        hashtag4: "#기본해시태그24",
        hashtag5: "#기본해시태그25"
      },
      {
        text: "기본 텍스트 3",
        hashtag1: "#기본해시태그31",
        hashtag2: "#기본해시태그32",
        hashtag3: "#기본해시태그33",
        hashtag4: "#기본해시태그34",
        hashtag5: "#기본해시태그35"
      }
    ]
  };

  const [chartData, setChartData] = useState([defaultData]);
  const [data8, setData8] = useState(defaultPersonaData);
  const images = [cardImage1, cardImage2, cardImage3];
  // selectedRegion 또는 ageGroup이 변경될 때마다 실행되는 useEffect
  useEffect(() => {
    const sendSelectionToBackend = async (region, age) => {
      try {
        const response = await axios.post('http://44.223.115.155:5000/api/selection', {
          "region": region,
          "age": age
        });
        const data = response.data;
        const data0to7 = data.slice(0,8);
        const data8 = data[8];
        console.log('백엔드 응답useEffect')
        setChartData(data0to7, () => {
          console.log('상태 업데이트 완료 후:', chartData); // 이곳에서 최신 chartData 값을 사용할 수 있음
        });
        setData8(data8, () => {
          console.log('상태 후 8번', data8);
        });
        // console.log('chart아래부분 응답:', chartData)
        // console.log('chart!!!부분 응답:')
      } catch (error) {
        console.error('백엔드로 선택 사항 전송 중 오류 발생:', error);
      }
    };

    // selectedRegion 또는 ageGroup이 변경될 때 sendSelectionToBackend 호출
    if (selectedRegion && ageGroup) {
      sendSelectionToBackend(selectedRegion.value, ageGroup.value)
      console.log('useffect 실행 응답:');
    }
  }, [selectedRegion, ageGroup]);


  

  const sendSelectionToBackend = async (region, age) => {
    try {
      const response = await axios.post('http://44.223.115.155:5000/api/selection', { "region": region["value"], "age": age["value"]});
      console.log('백엔드 응답:', response.data);
      const data = response.data;
      const data0to7 = data.slice(0,8);
      setChartData(data0to7); // 받은 데이터를 상태에 저장

      const data8 = data[8]
      setData8(data8)
      console.log('백엔드 응답8:', data8)
    } catch (error) {
      console.error('백엔드로 선택 사항 전송 중 오류 발생:', error);
    }
  };
  const customGridValues = [0, 20000, 40000, 80000, 100000, 200000];

  const options = [
    { value: '중랑구', label: '중랑구' },
    { value: '의왕시', label: '의왕시' },
    { value: '창원시', label: '창원시' },
    { value: '구로구', label: '구로구' }
  ];

  const options2 = [
    { value: '20대', label: '20대' },
    { value: '30대', label: '30대' },
    { value: '40대', label: '40대' },
    { value: '50대', label: '50대' },
    { value: '60대', label: '60대' },
  ];

  const options3 = [
    { value: '1', label: '요식업' },
    { value: '2', label: '미용' },
    { value: '3', label: '패션' },
    { value: '4', label: '주점' },
    { value: '5', label: '전자' },
  ];
  
  const customStyles = {
    control: (provided) => ({
      ...provided,
      marginLeft: '10px',
      marginRight: '30px',
    }),
    singleValue: (provided) => ({
      ...provided,
      fontFamily: 'Noto Sans KR, Inter, sans-serif', // 한글을 지원하는 폰트 추가
    }),
    menu: (provided) => ({
      ...provided,
      fontFamily: 'Noto Sans KR, Inter, sans-serif', // 한글을 지원하는 폰트 추가
    }),
  };

  const Card = ({ title, content }) => (
    <div className="bg-white rounded-lg shadow-md p-4" style={{ width: '300px', height: '250px' }} >
      <h3 className="text-lg font-semibold">{title}</h3>
      <p>{content}</p>
    </div>
  );
  const [selectedMenu, setSelectedMenu] = useState('analysisReport'); // 기본적으로 분석리포트 메뉴 선택
  const [showImageSection, setShowImageSection] = useState(false); // 이미지 섹션을 보여줄지 여부

  const handleMenuClick = (menu) => {
    setSelectedMenu(menu); // 클릭된 메뉴로 상태 업데이트
    setShowImageSection(false); // 이미지 섹션은 기본적으로 숨김
  };

  const handleClickForImageSection = () => {
    setShowImageSection(true); // 이미지 섹션을 보여줌
  };

  return (
    <div className="max-w-md mx-auto p-4">
      <div className="mb-0 flex items-center justify-between" style={{ backgroundColor: '#FFFFFF', height: '48px', padding: '0 16px' }}>
        <div className="flex items-center">
          <p className="text-lg font-semibold mr-2">9:41</p>
        </div>
        <div className="flex items-center">
          <FontAwesomeIcon icon={faSignal} className="w-6 h-6 mr-2" />
          <FontAwesomeIcon icon={faWifi} className="w-6 h-6 mr-2" />
          <FontAwesomeIcon icon={faBatteryFull} className="w-6 h-6" />
        </div>
      </div>
      <header className="flex items-center justify-between py-2" style={{ backgroundColor: '#FFFFFF' }}>
        <FontAwesomeIcon icon={faChevronLeft} className="w-6 h-6 ml-4" />
        <h1 className="text-lg inter">사장님ON</h1>
        <Image src={homeIcon} alt="Home Icon" className="w-6 h-6 mr-4" />
      </header>

      <nav className="flex items-center justify-center w-full mb-4 text-sm font-medium border-b" style={{ backgroundColor: '#FFFFFF' , marginBottom: '0px'}}>
        <div className={`p-2 font-hana2-bold ${selectedMenu === 'calendar' ? 'border-b-2 border-black' : ''}`} onClick={() => handleMenuClick('calendar')}>
          캘린더
        </div>
        <div className={`p-2 font-hana2-cm ${selectedMenu === 'analysisReport' ? 'border-b-2 border-black' : ''}`} onClick={() => handleMenuClick('analysisReport')}>
          분석리포트
        </div>
        <div className={`p-2 font-hana2-heavy ${selectedMenu === 'operationalSolution' ? 'border-b-2 border-black' : ''}`} onClick={() => handleMenuClick('operationalSolution')}>
          운영솔루션
        </div>
        <div className={`p-2 font-hana2-medium ${selectedMenu === 'businessLoan' ? 'border-b-2 border-black' : ''}`} onClick={() => handleMenuClick('businessLoan')}>
          사업자대출
        </div>
        <div className={`p-2 font-hana2-light ${selectedMenu === 'news' ? 'border-b-2 border-black' : ''}`} onClick={() => handleMenuClick('news')}>
          새소식
        </div>
      </nav>
      

      {/* 선택된 메뉴에 따라 다른 섹션을 보여줌 */}
      {selectedMenu === 'analysisReport' ? (
        <>
          {/* 분석 리포트 섹션 */}
          <section className="py-4" style={{ backgroundColor: '#FFFFFF' }}>
            <h2 className="text-lg font-semibold" style={{ padding: '0 13px' }}>김하나 사장님</h2>
            <p className="text-sm font-semibold text-muted-foreground" style={{ padding: '0 13px' }}>지난 달 경비 지출은 어땠나요?</p>
            <p className="text-sm font-semibold text-muted-foreground" style={{ padding: '0 13px' }}>
              2024. 06. 01 - 2024. 06. 30 <ChevronDownIcon className="inline w-4 h-4" />
            </p>
          </section>

          {/* 분석 리포트 내용 */}
          <section className="max-w-md mx-auto p-4" style={{ background: 'linear-gradient(to bottom, rgba(213, 241, 240, 0.9), #FFFFFF 60%)' }}>
            <h2 className="text-lg font-semibold" style={{ color: '#009591' }}>경비 분석 리포트</h2>
            <p className="text-sm font-semibold">
              지난달보다 개인 경비 지출이 <br /> 
              <span className="text-red-500">371,159원</span> 늘었어요
            </p>
            <p className="text-sm">
              <span style={{ color: '#FF0000', fontWeight: 'bold' }}>+18% 증가</span>
            </p>

            <div className="flex justify-around py-4">
              <div className="text-center">
                <PieChart className="w-24 h-24" />
                <p className="text-lg font-semibold mt-2">5 월</p>
              </div>
              <div className="text-center">
                <PieChart2 className="w-24 h-24" />
                <p className="text-lg font-semibold mt-2">6 월</p>
              </div>
            </div>
          </section>
          
          {/* 추가적인 섹션 */}
          <section className="py-4" style={{ backgroundColor: '#FFFFFF' }}>
            <div className="flex items-center py-2">
              <h2 className="text-sm font-semibold mr-4" style={{ padding: '0 13px' }}>동종업계 비교한 경비 지출을 확인해 보세요!</h2>
              <label htmlFor="input" className="mr-2">업종</label>
              {/* 예제로 쓴 Select는 옵션을 바꾸고 설정할 수 있습니다. */}
              <Select options={options3} placeholder="선택" className="mr-2 w-[120px]" />
            </div>
            <div className="grid grid-cols-2 gap-4 py-4">
              <BarChart className="w-full h-24" />
              <BarChart2 className="w-full h-24" />
              <BarChart3 className="w-full h-24" />
              <BarChart4 className="w-full h-24" />
            </div>
          </section>
          
          {/* 추가적인 섹션 */}
          <section className="py-4" style={{ background: 'linear-gradient(to bottom, rgba(213, 241, 240, 0.9), #FFFFFF 60%)' }}>
            <h2 className="text-lg font-semibold" style={{ padding: '0 13px' }}>손님ON</h2>
            <p className="text-sm" style={{ padding: '0 13px' }}>가게 지역과 손님 연령대를 선택하여 해당 지역의 손님 지출 유형을 확인해 보세요!!</p>
            
            <div className="flex items-center py-2">
              <h2 className="text-sm font-semibold mr-4" style={{ padding: '0 30px' }}>시군구 지역</h2>
              <h2 className="text-sm font-semibold ml-4" style={{ padding: '0 90px' }}>연령대</h2>
            </div>
            
            <div className="flex items-center py-2">
              <div className="mr-8">
                <Select
                  id="region"
                  placeholder="지역 선택"
                  options={options}
                  onChange={handleRegionChange}
                  className="ml-5 w-[150px]"
                />
              </div>
              
              <div className="ml-8">
                <Select
                  id="age"
                  placeholder="연령대 선택"
                  options={options2}
                  onChange={handleAgeChange}
                  className="mr-2 w-[150px]"
                />
              </div>
            </div>

            <div>
              {/* 이 부분은 chartData를 통해 데이터를 처리하는 부분입니다. */}
              { chartData ? (
                <RadarChart data={chartData} className="w-full h-64" />
              ) : (
                <p>데이터가 로드되지 않았습니다. 새로고침 해주세요.</p>
              )}
            </div>
          </section>
          
          {/* 추가적인 섹션 */}
          <section className="py-4" style={{ backgroundColor: '#FFFFFF' }}>
            <h2 className="text-lg font-semibold text-center">페르소나 분석</h2>
            <div className="flex overflow-x-auto space-x-4 py-4" style={{ width: '100%', flexShrink: 0 }}>
              {/* 이 부분은 data8을 map하면서 이미지를 나타내는 것입니다. */}
              {data8 && data8.persona.map((persona, index) => (
                <div key={index} className="rounded-lg shadow-md p-4" style={{ minWidth: '400px', maxWidth: '600px', height: '300px', backgroundColor: '#EDF7F7' , borderRadius: '4rem', borderColor: '#10B981', borderStyle: 'solid', borderWidth: '3px', padding: '5px' }}>
                  <div className="flex flex-col h-full">
                    <div className="flex flex-1 mb-4">
                      <div className="w-1/2 pr-4 flex items-center justify-center">
                        {/* 그리고 Image를 사용할 때 같은 구문을 이용해 줄 수 있습니다. */}
                        <Image src={images[index]} alt="Card Image error" className="w-6 h-6 mr-4" style={{ width: '80%', height: '80%' }} />
                      </div>
                      <div className="w-1/2" style={{ marginTop: '1rem' }} >
                        <div className="mb-8">
                          <h3 className="text-lg font-semibold mb-2 flex items-center justify-center" style={{ backgroundColor: '#529781', borderRadius: '999px', color: '#FFFFFF', display: 'inline-block',maxWidth: 'fit-content', padding: '0.2rem 1.5rem' }}>  페르소나 {index + 1}  </h3>
                          <p>{data8.persona[index].text}</p>
                        </div>
                      </div>
                    </div>
                    <div className="flex flex-wrap justify-center">
                      <div className="flex justify-center">
                        {Object.keys(persona)
                          .filter(key => key.startsWith('hashtag'))
                          .slice(0, 3) 
                          .map((key, i) => (
                            <span key={i} className="inline-block bg-gray-200 rounded-full px-2 py-1 text-sm font-normal text-gray-700 mr-2 mb-2" style={{ backgroundColor: 'rgba(233, 0, 97, 0.2)', borderRadius: '999px', whiteSpace: 'nowrap',fontSize: '0.8rem' }}>
                              {persona[key]}
                            </span>
                          ))}
                      </div>
                      <div className="flex justify-center">
                        {Object.keys(persona)
                          .filter(key => key.startsWith('hashtag'))
                          .slice(3, 5) 
                          .map((key, i) => (
                            <span key={i} className="inline-block bg-gray-200 rounded-full px-2 py-1 text-sm font-normal text-gray-700 mr-2 mb-2" style={{ backgroundColor: 'rgba(233, 0, 97, 0.2)', borderRadius: '999px', whiteSpace: 'nowrap',fontSize: '0.8rem' }}>
                              {persona[key]}
                            </span>
                          ))}
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </section>
        </>
      ) : (
        selectedMenu === 'calendar' && (
          <section className="py-4" style={{ backgroundColor: '#FFFFFF' }}>
            <div className="text-center" style={{ maxWidth: '100%', overflow: 'hidden' }}>
              <Image src={calenderimage} alt="Calendar Image" className="w-full h-full" />
              {/* 필요한 이미지 추가 */}
            </div>
          </section>
        )
      )}
  
      {/* 다른 메뉴에 대한 이미지 섹션 */}
      {selectedMenu === 'operationalSolution' && (
        <section className="py-4" style={{ backgroundColor: '#FFFFFF' }}>
          <div className="text-center" style={{ maxWidth: '100%', overflow: 'hidden' }} >
            <Image src={operationimage} alt="Operational Solution Image" className="w-full h-full" />
            {/* 필요한 이미지 추가 */}
          </div>
        </section>
      )}
  
      {selectedMenu === 'businessLoan' && (
        <section className="py-4" style={{ backgroundColor: '#FFFFFF' }}>
          <div className="text-center" style={{ maxWidth: '100%', overflow: 'hidden' }} >
            <Image src={loanimage} alt="Business Loan Image" className="w-full h-full" />
            {/* 필요한 이미지 추가 */}
          </div>
        </section>
      )}
  
      {selectedMenu === 'news' && (
        <section className="py-4" style={{ backgroundColor: '#FFFFFF' }}>
          <div className="text-center" style={{ maxWidth: '100%', overflow: 'hidden' }} >
            <Image src={infoimage} alt="News Image" className="w-full h-full" />
            {/* 필요한 이미지 추가 */}
          </div>
        </section>
      )}
    </div>
  );
}

function BarChart(props) {
  return (
    <div {...props}>
      <ResponsiveBar
        data={[
          { name: "평균", count: 20, color: "#D9D9D9" },
          { name: "나", count: 37, color: "#F0649E" }
        ]}
        keys={["count"]}
        indexBy="name"
        margin={{ top: 15, right: 0, bottom: 15, left: 40 }}
        padding={0.3}
        colors={({ id, data }) => data.color}
        axisBottom={null} // 축을 숨김
        axisLeft={null} // 축을 숨김
        enableGridY={false} // y 축 그리드도 숨김
        enableLabel={false} // 막대 라벨 활성화
        labelSkipWidth={30} // 라벨 간격 설정
        labelSkipHeight={35} // 라벨 간격 설정
        labelTextColor={{ from: 'color', modifiers: [['darker', 1.6]] }} // 라벨 텍스트 색상 설정
        theme={{
          tooltip: {
            chip: {
              borderRadius: "9999px",
            },
            container: {
              fontSize: "12px",
              textTransform: "capitalize",
              borderRadius: "6px",
            },
          },
          grid: {
            line: {
              stroke: "#f3f4f6",
            },
          },
        }}
        tooltipLabel={({ id, value }) => `${id}: ${value}`} // 툴팁 내용 설정
        legends={[]} // 범례를 모두 제거
        role="application"
        ariaLabel="A bar chart showing data"
      />
      <p className="text-right mt-0.001" style={{ marginRight: 55 ,fontWeight: 'bold' }}>고정비</p>
    </div>
  );
}


function BarChart2(props) {
  return (
    <div {...props}>
      <ResponsiveBar
        data={[
          { name: "평균", count: 20, color: "#D9D9D9" },
          { name: "나", count: 8, color: "#64BDBB" }
        ]}
        keys={["count"]}
        indexBy="name"
        margin={{ top: 15, right: 0, bottom: 15, left: 40 }}
        padding={0.3}
        colors={({ id, data }) => data.color}
        axisBottom={null} // 축을 숨김
        axisLeft={null} // 축을 숨김
        enableGridY={false} // y 축 그리드도 숨김
        enableLabel={false} // 막대 라벨 활성화
        labelSkipWidth={30} // 라벨 간격 설정
        labelSkipHeight={35} // 라벨 간격 설정
        labelTextColor={{ from: 'color', modifiers: [['darker', 1.6]] }} // 라벨 텍스트 색상 설정
        theme={{
          tooltip: {
            chip: {
              borderRadius: "9999px",
            },
            container: {
              fontSize: "12px",
              textTransform: "capitalize",
              borderRadius: "6px",
            },
          },
          grid: {
            line: {
              stroke: "#f3f4f6",
            },
          },
        }}
        tooltipLabel={({ id, value }) => `${id}: ${value}`} // 툴팁 내용 설정
        legends={[]} // 범례를 모두 제거
        role="application"
        ariaLabel="A bar chart showing data"
      />
      <p className="text-right mt-0.001" style={{ marginRight: 55 ,fontWeight: 'bold' }}>관리비</p>
    </div>
  );
}

function BarChart3(props) {
  return (
    <div {...props}>
      <ResponsiveBar
        data={[
          { name: "평균", count: 10, color: "#D9D9D9" },
          { name: "나", count: 2, color: "#64BDBB" }
        ]}
        keys={["count"]}
        indexBy="name"
        margin={{ top: 15, right: 0, bottom: 15, left: 40 }}
        padding={0.3}
        colors={({ id, data }) => data.color}
        axisBottom={null} // 축을 숨김
        axisLeft={null} // 축을 숨김
        enableGridY={false} // y 축 그리드도 숨김
        enableLabel={false} // 막대 라벨 활성화
        labelSkipWidth={30} // 라벨 간격 설정
        labelSkipHeight={35} // 라벨 간격 설정
        labelTextColor={{ from: 'color', modifiers: [['darker', 1.6]] }} // 라벨 텍스트 색상 설정
        theme={{
          tooltip: {
            chip: {
              borderRadius: "9999px",
            },
            container: {
              fontSize: "12px",
              textTransform: "capitalize",
              borderRadius: "6px",
            },
          },
          grid: {
            line: {
              stroke: "#f3f4f6",
            },
          },
        }}
        tooltipLabel={({ id, value }) => `${id}: ${value}`} // 툴팁 내용 설정
        legends={[]} // 범례를 모두 제거
        role="application"
        ariaLabel="A bar chart showing data"
      />
      <p className="text-right mt-0.001" style={{ marginRight: 55 ,fontWeight: 'bold' }}>대출이자</p>
    </div>
  );
}

function BarChart4(props) {
  return (
    <div {...props}>
      <ResponsiveBar
        data={[
          { name: "평균", count: 38, color: "#D9D9D9" },
          { name: "나", count: 33, color: "#64BDBB" }
        ]}
        keys={["count"]}
        indexBy="name"
        margin={{ top: 15, right: 0, bottom: 15, left: 40 }}
        padding={0.3}
        colors={({ id, data }) => data.color}
        axisBottom={null} // 축을 숨김
        axisLeft={null} // 축을 숨김
        enableGridY={false} // y 축 그리드도 숨김
        enableLabel={false} // 막대 라벨 활성화
        labelSkipWidth={30} // 라벨 간격 설정
        labelSkipHeight={35} // 라벨 간격 설정
        labelTextColor={{ from: 'color', modifiers: [['darker', 1.6]] }} // 라벨 텍스트 색상 설정
        theme={{
          tooltip: {
            chip: {
              borderRadius: "9999px",
            },
            container: {
              fontSize: "12px",
              textTransform: "capitalize",
              borderRadius: "6px",
            },
          },
          grid: {
            line: {
              stroke: "#f3f4f6",
            },
          },
        }}
        tooltipLabel={({ id, value }) => `${id}: ${value}`} // 툴팁 내용 설정
        legends={[]} // 범례를 모두 제거
        role="application"
        ariaLabel="A bar chart showing data"
      />
      <p className="text-right mt-0.001" style={{ marginRight: 55 ,fontWeight: 'bold' }}>변동비</p>
    </div>
  );
}


function ChevronDownIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <path d="m6 9 6 6 6-6" />
    </svg>)
  );
}


function HomeIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <path d="m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z" />
      <polyline points="9 22 9 12 15 12 15 22" />
    </svg>)
  );
}


function LineChart(props) {
  return (
    (<div {...props}>
      <ResponsiveLine
        data={[
          {
            id: "Desktop",
            data: [
              { x: "Jan", y: 43 },
              { x: "Feb", y: 137 },
              { x: "Mar", y: 61 },
              { x: "Apr", y: 145 },
              { x: "May", y: 26 },
              { x: "Jun", y: 154 },
            ],
          },
          {
            id: "Mobile",
            data: [
              { x: "Jan", y: 60 },
              { x: "Feb", y: 48 },
              { x: "Mar", y: 177 },
              { x: "Apr", y: 78 },
              { x: "May", y: 96 },
              { x: "Jun", y: 204 },
            ],
          },
        ]}
        margin={{ top: 10, right: 10, bottom: 40, left: 40 }}
        xScale={{
          type: "point",
        }}
        yScale={{
          type: "linear",
        }}
        axisTop={null}
        axisRight={null}
        axisBottom={{
          tickSize: 0,
          tickPadding: 16,
        }}
        axisLeft={{
          tickSize: 0,
          tickValues: 5,
          tickPadding: 16,
        }}
        colors={["#2563eb", "#e11d48"]}
        pointSize={6}
        useMesh={true}
        gridYValues={6}
        theme={{
          tooltip: {
            chip: {
              borderRadius: "9999px",
            },
            container: {
              fontSize: "12px",
              textTransform: "capitalize",
              borderRadius: "6px",
            },
          },
          grid: {
            line: {
              stroke: "#f3f4f6",
            },
          },
        }}
        role="application" />
    </div>)
  );
}

function PieChart(props) {
  return (
    <div {...props} style={{ width: '200px', height: '200px' }} >
      <ResponsivePie
        data={[
          { id: "Jan", value: 76 , color: "#64BDBB" } ,
          { id: "Feb", value: 24 , color: "#F0649E" } ,
          // Remove the other months if you want to display only two segments
          // { id: "Mar", value: 129 },
          // { id: "Apr", value: 150 },
          // { id: "May", value: 119 },
          // { id: "Jun", value: 72 },
        ]}
        sortByValue = {false}
        margin={{ top: 10, right: 20, bottom: 10, left: 20 }}
        cornerRadius={0}
        padAngle={0.7} // Increase padAngle for separation between slices
        borderWidth={0}
        borderColor={"#ffffff"}
        enableArcLinkLabels={false}
        enableArcLabels={false}
        arcLabel={(d) => `${d.id}`}
        arcLabelsTextColor={"#ffffff"}
        arcLabelsRadiusOffset={0.65}
        colors={({ id, data }) => data.color}
        theme={{
          labels: {
            text: {
              fontSize: "18px",
            },
          },
          tooltip: {
            chip: {
              borderRadius: "9999px",
            },
            container: {
              fontSize: "12px",
              textTransform: "capitalize",
              borderRadius: "6px",
            },
          },
        }}
        role="application"
        innerRadius={0.25}
      />
    </div>
  );
}


function UndoIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <path d="M3 7v6h6" />
      <path d="M21 17a9 9 0 0 0-9-9 9 9 0 0 0-6 2.3L3 13" />
    </svg>)
  );
}

function PieChart2(props) {
  return (
    <div {...props} style={{ width: '200px', height: '200px' }} >
      <ResponsivePie
        data={[
          { id: "Jan", value: 58 , color: "#64BDBB" } ,
          { id: "Feb", value: 42 , color: "#F0649E" } ,
          // Remove the other months if you want to display only two segments
          // { id: "Mar", value: 129 },
          // { id: "Apr", value: 150 },
          // { id: "May", value: 119 },
          // { id: "Jun", value: 72 },
        ]}
        sortByValue = {false}
        margin={{ top: 10, right: 20, bottom: 10, left: 20 }}
        cornerRadius={0}
        padAngle={0.7} // Increase padAngle for separation between slices
        borderWidth={0}
        borderColor={"#ffffff"}
        enableArcLinkLabels={false}
        enableArcLabels={false}
        arcLabel={(d) => `${d.id}`}
        arcLabelsTextColor={"#ffffff"}
        arcLabelsRadiusOffset={0.65}
        colors={({ id, data }) => data.color}
        theme={{
          labels: {
            text: {
              fontSize: "18px",
            },
          },
          tooltip: {
            chip: {
              borderRadius: "9999px",
            },
            container: {
              fontSize: "12px",
              textTransform: "capitalize",
              borderRadius: "6px",
            },
          },
        }}
        role="application"
        innerRadius={0.25}
      />
    </div>
  );
}


function RadarChart({ data }) {
  return (
    <div className="w-full h-64">
      <ResponsiveRadar
        data={data}
        keys={['chardonay', 'carmenere']}
        indexBy="taste"
        // gridLevels={customGridValues.length - 1}
        // gridValues={customGridValues} // 원하는 그리드 값 설정
        valueFormat=">-.2f"
        margin={{ top: 20, right: 10, bottom: 20, left: 10 }}
        borderColor={{ from: 'color' }}
        gridLabelOffset={10}
        dotSize={10}
        dotColor={{ theme: 'background' }}
        dotBorderWidth={2}
        colors={['#F0649E', '#289F99']} // 사용자 정의 색상 설정
        enableDots={false}
        blendMode="multiply"
        motionConfig="wobbly"
        legends={[
          {
            dataFrom: 'keys',
            data: [
              { id: 'chardonay', label: '선택지역,연령대평균' }, // 여기서 라벨을 바꿀 수 있습니다.
              { id: 'carmenere', label: '전체평균' }
            ],
            anchor: 'top-left',
            direction: 'column',
            translateX: 0,
            translateY: 0,
            itemWidth: 80,
            itemHeight: 20,
            itemTextColor: '#999',
            symbolSize: 12,
            symbolShape: 'circle',
            effects: [
              {
                on: 'hover',
                style: {
                  itemTextColor: '#000'
                }
              }
            ]
          }
        ]}
        role="application"
      />
    </div>
  );
}

function RadarChart1(props) {
  return (
    (<div {...props} style={{ width: '400px', height: '300px' }}>
      <ResponsiveRadar
        data={[
          {
            "taste": "교육",
            "chardonay": 93,
            "carmenere": 71,
            "syrah": 37
          },
          {
            "taste": "교통",
            "chardonay": 77,
            "carmenere": 22,
            "syrah": 87
          },
          {
            "taste": "납부",
            "chardonay": 72,
            "carmenere": 100,
            "syrah": 86
          },
          {
            "taste": "사교활동",
            "chardonay": 104,
            "carmenere": 30,
            "syrah": 63
          },
          {
            "taste": "쇼핑",
            "chardonay": 93,
            "carmenere": 89,
            "syrah": 111
          },
          {
            "taste": "여유생활",
            "chardonay": 90,
            "carmenere": 80,
            "syrah": 95
          },
          {
            "taste": "요식",
            "chardonay": 85,
            "carmenere": 70,
            "syrah": 80
          },
          {
            "taste": "의료",
            "chardonay": 78,
            "carmenere": 65,
            "syrah": 88
          }
        ]}
        keys={['chardonay', 'carmenere', 'syrah']}
        indexBy="taste"
        valueFormat=">-.2f"
        margin={{ top: 20, right: 10, bottom: 20, left: 10 }}
        borderColor={{ from: 'color' }}
        gridLabelOffset={10}
        dotSize={10}
        dotColor={{ theme: 'background' }}
        dotBorderWidth={2}
        colors={{ scheme: 'nivo' }}
        enableDots = {false}
        blendMode="multiply"
        motionConfig="wobbly"
        legends={[
            {
                anchor: 'top-left',
                direction: 'column',
                translateX: 0,
                translateY: 0,
                itemWidth: 80,
                itemHeight: 20,
                itemTextColor: '#999',
                symbolSize: 12,
                symbolShape: 'circle',
                effects: [
                    {
                        on: 'hover',
                        style: {
                            itemTextColor: '#000'
                        }
                    }
                ]
            }
        ]}
        role="application" />
    </div>)
  );
}
